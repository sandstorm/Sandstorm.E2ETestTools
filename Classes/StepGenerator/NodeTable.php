<?php

namespace Sandstorm\E2ETestTools\StepGenerator;

use Neos\ContentRepository\Domain\Model\NodeInterface;
use Neos\ContentRepository\Domain\NodeType\NodeTypeConstraints;
use Neos\ContentRepository\Domain\Projection\Content\TraversableNodeInterface;
use Neos\Media\Domain\Model\ImageInterface;
use Neos\Media\Domain\Model\ResourceBasedInterface;
use Neos\Utility\ObjectAccess;
use Neos\Utility\TypeHandling;

/**
 *
 * @internal
 */
class NodeTable
{
    private GherkinTable $nodeTable;
    private PersistentResourceFixtures $persistentResourceFixtures;
    private ImageTable $imageTable;

    private array $defaultProperties;

    public function __construct(
        array $defaultProperties = [],
        ?string $fixtureBasePath = null,
        array $defaultPersistentResourceProperties = [],
        array $defaultImageProperties = []
    )
    {
        $this->defaultProperties = $defaultProperties;
        $this->nodeTable = new GherkinTable(array_merge([
            'Path',
            'Node Type',
            'Properties',
            'HiddenInIndex'
        ], array_keys($defaultProperties)));
        $this->persistentResourceFixtures = new PersistentResourceFixtures($fixtureBasePath, $defaultPersistentResourceProperties);
        $this->imageTable = new ImageTable($this->persistentResourceFixtures, $defaultImageProperties);
    }

    public function addNode(NodeInterface $node, bool $includeAutoCreatedNode = false): void
    {
        if ($node->getPath() === '/') {
            // we never need to add the "/" node
            return;
        }
        if (!$includeAutoCreatedNode && $node->isAutoCreated()) {
            return;
        }
        $this->nodeTable->addRow(array_merge($this->defaultProperties, [
            'Path' => $node->getPath(),
            'Node Type' => $node->getNodeType()->getName(),
            'Properties' => $this->serializeNodeProperties($node),
            'HiddenInIndex' => $node->isHiddenInIndex() ? 'true' : 'false'
        ]));
    }

    private function serializeNodeProperties(NodeInterface $node): string
    {
        $properties = $node->getNodeData()->getProperties();
        $propertiesSerialized = [];
        foreach ($properties as $propertyName => $propertyValue) {
            if ($propertyValue instanceof ResourceBasedInterface) {
                $objectType = TypeHandling::getTypeForValue($propertyValue);
                $objectIdentifier = ObjectAccess::getProperty($propertyValue, 'Persistence_Object_Identifier', true);
                $serializedReference = [
                    '__flow_object_type' => $objectType,
                    '__identifier' => $objectIdentifier
                ];
                $propertiesSerialized[$propertyName] = $serializedReference;
                // keep track of external resources that needs to be stored as fixtures later
                if ($propertyValue instanceof ImageInterface) {
                    // add image
                    $this->imageTable->addImage($objectIdentifier, $propertyValue);
                }
            } else {
                $propertiesSerialized[$propertyName] = $propertyValue;
            }
        }
        return json_encode($propertiesSerialized);
    }

    /**
     * @deprecated use {@link \Sandstorm\E2ETestTools\StepGenerator\NodeTable::addNodesUnderneath} directly
     */
    public function addNodesUnderneathExcludingAutoGeneratedChildNodes(
        NodeInterface $node,
        string $nodeTypeFilter,
        ?int $maxSiblings = null,
        ?int $maxDepth = null,
    ): void {
        $this->addChildNodesRecursively(
            $node,
            $nodeTypeFilter,
            $maxSiblings,
            $maxDepth,
            false,
        );
    }

    /**
     * Auto generated child-nodes are excluded here. But we don't need them anyways, since they
     * are created automatically during import based on the node type yaml.
     *
     * @param NodeInterface $node the top level node
     * @param $nodeTypeFilter string|null pass in null for no filter
     */
    public function addChildNodesRecursively(
        NodeInterface $node,
        string $nodeTypeFilter,
        ?int $maxSiblings = null,
        ?int $maxDepth = null,
        ?bool $includeAutoCreatedNodes = false,
    ): void
    {
        $this->_addChildNodesRecursively(
            $node,
            $nodeTypeFilter,
            $maxSiblings,
            $maxDepth,
            $includeAutoCreatedNodes,
            0,
        );
    }

    private function _addChildNodesRecursively(
        NodeInterface $node,
        string $nodeTypeFilter,
        ?int $maxSiblings,
        ?int $maxDepth,
        ?bool $includeAutoCreatedNodes,
        int $currentDepth,
    ): void
    {
        foreach ($node->findChildNodes(new NodeTypeConstraints(false, [$nodeTypeFilter]), $maxSiblings) as $childNode) {
            $this->addNode($childNode, $includeAutoCreatedNodes);
            if ($maxDepth !== null && $maxDepth < $currentDepth) {
                break;
            }
            $this->_addChildNodesRecursively(
                $childNode,
                $nodeTypeFilter,
                $maxSiblings,
                $maxDepth,
                $includeAutoCreatedNodes,
                $currentDepth + 1,
            );
        }
    }

    public function addChildNodes(
        TraversableNodeInterface $baseNode,
        string $nodeTypeFilter,
        ?int $limit = null,
        ?\Closure $childNodeHandler = null
    ): void
    {
        foreach ($baseNode->findChildNodes(new NodeTypeConstraints(false, [$nodeTypeFilter]), $limit) as $childNode) {
            $this->addNode($childNode);
            if ($childNodeHandler !== null) {
                $childNodeHandler($childNode);
            }
        }
    }

    /**
     * @deprecated use {@link \Sandstorm\E2ETestTools\StepGenerator\NodeTable::addChildNodesRecursively} since better naming, this gets removed soon!
     */
    public function addNodesUnderneath(NodeInterface $node, $nodeTypeFilter): void
    {
        $this->addChildNodesRecursively($node, $nodeTypeFilter);
    }

    public function addParents(NodeInterface $node): void
    {
        $parentNode = $node->getParent();
        if ($parentNode !== null) {
            $this->addParents($parentNode);
            $this->addNode($parentNode);
        }
    }

    public function print(): void
    {
        $this->persistentResourceFixtures->storeFixtures();

        $this->imageTable->print();

        echo 'Given I have the following nodes:';
        echo "\n";
        $this->nodeTable->print();
    }

}
